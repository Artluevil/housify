{"version":3,"sources":["components/HouseCard.js","App.js","features/posts/postsSlice.js","features/counter/CounterSlice.js","app/store.js","serviceWorker.js","index.js"],"names":["HouseCard","props","data","className","src","img","title","dsc","id","App","cardData","Cards","map","postsSlice","createSlice","name","initialState","content","reducers","postAdded","state","action","push","payload","actions","counterSlice","value","increment","store","configureStore","reducer","posts","postsReducer","counter","countersReducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"kLAiBeA,EAfG,SAACC,GAEf,IAAQC,EAASD,EAATC,KAER,OACI,mCACI,sBAAmBC,UAAU,uBAA7B,UACI,qBAAKC,IAAKF,EAAKG,MACf,6BAAKH,EAAKI,QACV,4BAAIJ,EAAKK,QAHHL,EAAKM,O,OCuBZC,MA3Bf,WACE,OACE,qCACE,wBAAQN,UAAU,MAAlB,SACE,qBAAKA,UAAU,eAAf,SACE,4CAGJ,yBAASA,UAAU,wBAAnB,SACE,sBAAKA,UAAU,mBAAf,UACE,qBAAKA,UAAU,mBACf,qBAAKA,UAAU,gBAAf,SACE,+BACE,uBAAOA,UAAU,iCAKzB,yBAASA,UAAU,qBAAnB,SACGO,EAASC,MAAMC,KAAI,SAACV,GAAD,OAClB,cAAC,EAAD,CAAWA,KAAMA,a,OCjBrBW,EAAaC,YAAY,CAC3BC,KAAM,QACNC,aAPiB,CACjB,CAACR,GAAI,IAAKF,MAAO,cAAeW,QAAS,UACzC,CAACT,GAAI,IAAKF,MAAO,eAAgBW,QAAS,cAM1CC,SAAU,CACNC,UADM,SACIC,EAAOC,GACbD,EAAME,KAAKD,EAAOE,aAOfV,GAFcA,EAAWW,QAAzBL,UAEAN,EAAf,SCjBMY,EAAeX,YAAY,CAC7BC,KAAM,UACNC,aAAc,CACVU,MAAO,GAEXR,SAAU,CACNS,UAAW,SAAAP,GACPA,EAAMM,OAAS,MAOZD,GAFcA,EAAaD,QAA3BG,UAEAF,EAAf,SCZaG,EAAQC,YAAe,CAClCC,QAAS,CACPC,MAAOC,EACPC,QAASC,K,OCKOC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUd,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJe,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,iB","file":"static/js/main.cf97cf8f.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst HouseCard = (props) => {\r\n\r\n    const { data } = props\r\n\r\n    return (\r\n        <>\r\n            <div key={data.id} className=\"house-card-container\">\r\n                <img src={data.img}/>\r\n                <h2>{data.title}</h2>\r\n                <p>{data.dsc}</p>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default HouseCard","import React from 'react';\nimport HouseCard from './components/HouseCard';\nimport cardData from './data/houseCardsData.json';\n\nfunction App() {\n  return (\n    <>\n      <header className=\"nav\">\n        <div className=\"company-logo\">\n          <p>Housify</p>\n        </div>\n      </header>\n      <section className=\"search-engine-section\">\n        <div className=\"search-container\">\n          <div className=\"background-img\"></div>\n          <div className=\"image-overlay\">\n            <form>\n              <input className=\"search-engine-input\"></input>\n            </form>\n          </div>\n        </div>\n      </section>\n      <section className=\"house-card-section\">\n        {cardData.Cards.map((data) => (\n          <HouseCard data={data}/>\n        ))}\n      </section>\n    </>\n  )\n}\n\nexport default App","import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst initialState = [\r\n    {id: '1', title: 'First Post!', content: 'Hello!'},\r\n    {id: '2', title: 'Second Post!', content: 'Some text'}\r\n]\r\n\r\nconst postsSlice = createSlice({\r\n    name: 'posts',\r\n    initialState,\r\n    reducers: {\r\n        postAdded(state, action) {\r\n            state.push(action.payload)\r\n        }\r\n    }\r\n})\r\n\r\nexport const { postAdded } = postsSlice.actions\r\n\r\nexport default postsSlice.reducer","import { createSlice } from '@reduxjs/toolkit'\r\n\r\nconst counterSlice = createSlice({\r\n    name: 'counter',\r\n    initialState: {\r\n        value: 0\r\n    },\r\n    reducers: {\r\n        increment: state => {\r\n            state.value += 1\r\n        }\r\n    }\r\n})\r\n\r\nexport const { increment } = counterSlice.actions \r\n\r\nexport default counterSlice.reducer","import { configureStore } from '@reduxjs/toolkit';\nimport postsReducer from '../features/posts/postsSlice'\nimport countersReducer from '../features/counter/CounterSlice'\n\nexport const store = configureStore({\n  reducer: {\n    posts: postsReducer,\n    counter: countersReducer\n  },\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './styles/App.css';\nimport App from './App';\nimport { store } from './app/store';\nimport { Provider } from 'react-redux';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}